apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  chart:
    spec:
      #version: "53.x"
      version: "61.3"
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      interval: 1h
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  valuesFrom:
  - kind: ConfigMap
    name: flux-kube-state-metrics-config
    valuesKey: kube-state-metrics-config.yaml
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  values:
    alertmanager:     
      enabled: true
      config:
        global:
          resolve_timeout: 4m
      ingress:
          enabled: true
          ingressClassName: nginx
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-production
            external-dns.alpha.kubernetes.io/hostname: alerts.pfc.zone
            external-dns.alpha.kubernetes.io/target: cluster.pfc.zone
            nginx.ingress.kubernetes.io/auth-type: basic
            nginx.ingress.kubernetes.io/auth-secret: prometheus-auth
            nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - PFC Cluster'
          hosts: 
            - alerts.pfc.zone
          tls:
            - hosts:
              - alerts.pfc.zone
              secretName: alert-tls-secret
        
    prometheus:
      prometheusSpec:
      # about 10 days
        retention: 250h
        resources:
          requests:
            cpu: 2000m
            memory: 600Mi
        podMonitorNamespaceSelector: { }
        podMonitorSelector:
          matchLabels:
            app.kubernetes.io/component: monitoring
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: [ "ReadWriteOnce" ]
              storageClassName: ssd-persistent-block-store
              resources:
                requests:
                  storage: 100Gi    
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/hostname: prometheus.pfc.zone
          external-dns.alpha.kubernetes.io/target: cluster.pfc.zone   
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: prometheus-auth
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - PFC Cluster'
        hosts: 
          - prometheus.pfc.zone
        tls:
          - hosts:
            - prometheus.pfc.zone
            secretName: metrics-tls-secret

    grafana:
      defaultDashboardsEnabled: false
      adminPassword: pfc-cluster
      sidecar:
        dashboards:
          enabled: true
          defaultFolderName: "General"
          label: grafana_dashboard
          labelValue: "1"
          folderAnnotation: grafana_folder
          searchNamespace: ALL
          provider:
            foldersFromFilesStructure: true
      dashboardProviders:
          dashboardproviders.yaml:
            apiVersion: 1
            providers:
            - name: 'grafana-dashboards-kubernetes'
              orgId: 1
              folder: 'Kubernetes'
              type: file
              disableDeletion: true
              editable: true
              options:
                path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
      dashboards:
          grafana-dashboards-kubernetes:
            k8s-system-api-server:
              url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
              token: ''
            k8s-system-coredns:
              url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
              token: ''
            k8s-views-global:
              url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
              token: ''
            k8s-views-namespaces:
              url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
              token: ''
            k8s-views-nodes:
              url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
              token: ''
            k8s-views-pods:
              url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
              token: ''
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/hostname: grafana.pfc.zone
          external-dns.alpha.kubernetes.io/target: cluster.pfc.zone   
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: prometheus-auth
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - PFC Cluster'
        hosts: 
          - grafana.pfc.zone
        tls:
          - hosts:
            - grafana.pfc.zone
            secretName: grafana-tls-secret
        
  postRenderers:
    - kustomize:
        patches:
          - target:
              # Ignore these objects from Flux diff as they are mutated from chart hooks
              kind: (ValidatingWebhookConfiguration|MutatingWebhookConfiguration)
              name: kube-prometheus-stack-admission
            patch: |
              - op: add
                path: /metadata/annotations/helm.toolkit.fluxcd.io~1driftDetection
                value: disabled
          - target:
              # Ignore these objects from Flux diff as they are mutated at apply time but not at dry-run time
              kind: PrometheusRule
            patch: |
              - op: add
                path: /metadata/annotations/helm.toolkit.fluxcd.io~1driftDetection
                value: disabled
